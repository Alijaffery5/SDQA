        return 'MobilePhone type'
    """This object represents an Iphone model"""
            flag = True
        return self._r.ring()
    print(iphone6.lay())
        This object represents a specific phone.
class MobilePhone(Phone):
                            flag = False
class Iphone6(Iphone):
            for line in file:
                arr = line.split()
                    if arr[1].find('__init__') != -1:
        return counter
        return 'Siri answers: hey {}, how can i help you?'.format(user)
    def type(self) -> str:
                if len(arr) < 2:
    print(iphone6.stay())
                    if flag:
                    continue
        return "Iphone 6 is a subtype of Iphone"
        counter = 0
    print(iphone6.type())
    print(iphone6.hey_siri('Mike'))
    def ring(self) -> str:
            with open("data/"+file,"r") as file:
                            counter += 1
    def type(self):
    """This object represents a Samsung mobile phone type"""
                        else:
        return "Samsung GalaxyS8 model is a subtype of Samsung mobile phone"
        return 'Google answers: hey {}, how can i help you?'.format(user)
class Samsung(MobilePhone):
    """This object represents an Iphone 6 model"""
class SamsungGalaxyS8(Samsung):
                        counter += 1
    def __init__(self):
        return "iphone 7"
class Test(SamsungGalaxyS8):
        with open("data/"+file,"r") as file:
    def test2(self):
    def hey_siri(self, user: str, temp, temp2, temp3) -> str:
    def Number_of_fields(self,file):
                        continue          
                    if len(arr) < 2:
        self._r = Ringable(name)  # composition
class Iphone(MobilePhone):
    pass
    """This object represents an Iphone 7 model"""
    def hey_google(self, user: str) -> str:
                        flag = False
class Phone(ABC):
                if flag:
        Contains 5 interfaces to implement in it's subclasses.
            
        return "iphone 6"
        return 'Iphone model subtype of mobile phone'
    print(iphone6)
                    if line.find("self.") != -1:
    def test(self):
                        flag = True
    """This object represents a specific mobile phone"""
        return "Samsung model is a subtype of mobile phone"
    print(iphone6.ring())
                    else:
                    flag = True
                for line in file:
from oop.abilities import Ringable, Stayable, Layable, Movable
        return "Iphone 7 is a subtype of Iphone"
            flag = False
                    arr = line.split()
                if arr[1].find('__init__') != -1:
            counter = 0
class Iphone7(Iphone):
                flag = False
                        continue
                        if line.find("self.") != -1:
    """This object represents a SamsungGalaxyS8 mobile phone type"""
    iphone6 = Iphone6()
